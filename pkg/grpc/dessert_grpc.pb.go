// バージョンの指定
//指定がなければデフォルトで2になる

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: dessert.proto

// パッケージの宣言
//Protocol Buffersのパッケージ名。この名前空間は、生成されるコードの一部として使用される。

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DessertService_GetDessertStream_FullMethodName = "/grpcApi.DessertService/GetDessertStream"
)

// DessertServiceClient is the client API for DessertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DessertServiceClient interface {
	// stream型を指定することでストリーミングでデータを送受信できる
	GetDessertStream(ctx context.Context, in *DessertRequest, opts ...grpc.CallOption) (DessertService_GetDessertStreamClient, error)
}

type dessertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDessertServiceClient(cc grpc.ClientConnInterface) DessertServiceClient {
	return &dessertServiceClient{cc}
}

func (c *dessertServiceClient) GetDessertStream(ctx context.Context, in *DessertRequest, opts ...grpc.CallOption) (DessertService_GetDessertStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DessertService_ServiceDesc.Streams[0], DessertService_GetDessertStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dessertServiceGetDessertStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DessertService_GetDessertStreamClient interface {
	Recv() (*DessertResponse, error)
	grpc.ClientStream
}

type dessertServiceGetDessertStreamClient struct {
	grpc.ClientStream
}

func (x *dessertServiceGetDessertStreamClient) Recv() (*DessertResponse, error) {
	m := new(DessertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DessertServiceServer is the server API for DessertService service.
// All implementations must embed UnimplementedDessertServiceServer
// for forward compatibility
type DessertServiceServer interface {
	// stream型を指定することでストリーミングでデータを送受信できる
	GetDessertStream(*DessertRequest, DessertService_GetDessertStreamServer) error
	mustEmbedUnimplementedDessertServiceServer()
}

// UnimplementedDessertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDessertServiceServer struct {
}

func (UnimplementedDessertServiceServer) GetDessertStream(*DessertRequest, DessertService_GetDessertStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDessertStream not implemented")
}
func (UnimplementedDessertServiceServer) mustEmbedUnimplementedDessertServiceServer() {}

// UnsafeDessertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DessertServiceServer will
// result in compilation errors.
type UnsafeDessertServiceServer interface {
	mustEmbedUnimplementedDessertServiceServer()
}

func RegisterDessertServiceServer(s grpc.ServiceRegistrar, srv DessertServiceServer) {
	s.RegisterService(&DessertService_ServiceDesc, srv)
}

func _DessertService_GetDessertStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DessertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DessertServiceServer).GetDessertStream(m, &dessertServiceGetDessertStreamServer{stream})
}

type DessertService_GetDessertStreamServer interface {
	Send(*DessertResponse) error
	grpc.ServerStream
}

type dessertServiceGetDessertStreamServer struct {
	grpc.ServerStream
}

func (x *dessertServiceGetDessertStreamServer) Send(m *DessertResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DessertService_ServiceDesc is the grpc.ServiceDesc for DessertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DessertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcApi.DessertService",
	HandlerType: (*DessertServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDessertStream",
			Handler:       _DessertService_GetDessertStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dessert.proto",
}
